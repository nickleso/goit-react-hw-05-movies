{"version":3,"file":"static/js/773.8ff0bbd1.chunk.js","mappings":"6LAAO,IAAMA,EAAM,mCAENC,EAAW,8B,uJCCTC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BC,GAA9B,kFACQC,EADR,UACiBH,EAAAA,EADjB,kBACmCE,EADnC,oBACsDH,EAAAA,GADtD,SAKyBK,EAAAA,GAAAA,IAAUD,GALnC,uBAKUE,EALV,EAKUA,KALV,kBAMSA,GANT,kEASA,M,SAT8B,GAAfJ,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,2BC2DTK,EAAgB,SAACC,EAAcC,GACnC,OAAKD,GAAiBC,EAIlBD,EACK,IAAMA,EAAaE,MAAM,EAAG,GAAK,IAGnC,IAAMD,EAAeC,MAAM,EAAG,GAAK,IAPjC,EAQV,EAED,EArEmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACdC,GAAWC,EAAAA,EAAAA,MAGfC,EASEH,EATFG,YACAC,EAQEJ,EARFI,MACAC,EAOEL,EAPFK,KACAC,EAMEN,EANFM,eACAT,EAKEG,EALFH,aACAC,EAIEE,EAJFF,eACAS,EAGEP,EAHFO,SACAC,EAEER,EAFFQ,aACAC,EACET,EADFS,OAGF,OACE,iBAAKC,MAAO,CAAEC,WAAY,IAA1B,WACE,UAAC,KAAD,YACE,gBACEC,MAAM,QACNC,IAtBc,kCAsBSV,EACvBW,IAAKV,GAASC,KAEhB,4BACE,0BACGD,GAASC,GAAQC,GAAkB,WACpC,gCAAQV,EAAcC,EAAcC,UAEtC,yCACc,4BAAOiB,KAAKC,KAAoB,GAAfR,GAAjB,WAEd,sCACA,uBAAID,KACJ,oCACA,uBAAIE,EAAOQ,KAAI,SAAAC,GAAK,OAAIA,EAAMb,IAAV,IAAgBc,KAAK,cAI7C,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAYC,GAAG,OAAOC,MAAO,CAAEC,KAAMrB,EAASoB,MAAMC,MAApD,qBAIF,yBACE,SAAC,KAAD,CAAYF,GAAG,UAAUC,MAAO,CAAEC,KAAMrB,EAASoB,MAAMC,MAAvD,+BAQX,ECZD,EAxCqB,WAAO,IAAD,IACjBC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAgCE,EAAAA,EAAAA,UAAS,MAAzC,eAAOzB,EAAP,KAAiB0B,EAAjB,KACMzB,GAAWC,EAAAA,EAAAA,MACXyB,EAAY,oBAAG1B,EAASoB,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAgB7C,OAdAM,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAEuBrC,EAAegC,GAFtC,OAEUM,EAFV,OAIIH,EAAYG,GAJhB,gDAMIC,QAAQC,IAAR,MANJ,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACT,EAAIG,IAEH1B,GAKH,6BACE,UAAC,KAAD,CAAUoB,GAAIO,EAAd,WACE,SAAC,MAAD,CAAmBM,KAAM,KAD3B,cAKA,SAAC,EAAD,CAAYjC,SAAUA,EAAUqB,MAAO,CAAEC,KAAMrB,MAE/C,SAAC,EAAAiC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,SAbG,IAiBV,C,4IC3CYC,EAAYC,EAAAA,GAAAA,IAAH,mHAOTC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,kTAiBRG,GAAaH,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,gH","sources":["MoviesAPI/key-url.js","MoviesAPI/fetchFilmsById.js","components/Movies/MoviesInfo.jsx","Pages/Movies/MoviesDetails.jsx","components/Movies/Movies.styled.jsx"],"sourcesContent":["export const KEY = '3c2d3d1a4a9318a7ef02a0fdedccb03f';\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n","import axios from 'axios';\nimport { KEY, BASE_URL } from './key-url';\n\nasync function fetchFilmsById(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?api_key=${KEY}`;\n\n  // &page=${page}\n\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport default fetchFilmsById;\n","import { useLocation } from 'react-router-dom';\nimport { StyledDiv, StyledLink } from './Movies.styled';\n\nconst BASE_IMAGES_URL = 'https://image.tmdb.org/t/p/w400';\n\nconst MoviesInfo = ({ filmInfo }) => {\n  const location = useLocation();\n\n  const {\n    poster_path,\n    title,\n    name,\n    original_title,\n    release_date,\n    first_air_date,\n    overview,\n    vote_average,\n    genres,\n  } = filmInfo;\n\n  return (\n    <div style={{ paddingTop: 16 }}>\n      <StyledDiv>\n        <img\n          width=\"200px\"\n          src={BASE_IMAGES_URL + poster_path}\n          alt={title || name}\n        />\n        <div>\n          <h2>\n            {title || name || original_title || 'no info'}\n            <span> {sliceFunction(release_date, first_air_date)}</span>\n          </h2>\n          <p>\n            User Score: <span>{Math.ceil(vote_average * 10)}%</span>\n          </p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres.map(genre => genre.name).join(' ')}</p>\n        </div>\n      </StyledDiv>\n\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <StyledLink to=\"cast\" state={{ from: location.state.from }}>\n              Cast\n            </StyledLink>\n          </li>\n          <li>\n            <StyledLink to=\"reviews\" state={{ from: location.state.from }}>\n              Reviews\n            </StyledLink>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst sliceFunction = (release_date, first_air_date) => {\n  if (!release_date && !first_air_date) {\n    return '';\n  }\n\n  if (release_date) {\n    return '(' + release_date.slice(0, 4) + ')';\n  }\n\n  return '(' + first_air_date.slice(0, 4) + ')';\n};\n\nexport default MoviesInfo;\n","import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport fetchFilmsById from 'MoviesAPI/fetchFilmsById';\nimport { BiLeftArrowCircle } from 'react-icons/bi';\nimport MoviesInfo from 'components/Movies/MoviesInfo';\nimport { BackLink } from 'components/Movies/Movies.styled';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [filmInfo, setFilmInfo] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    async function searchFilmsById() {\n      try {\n        const film = await fetchFilmsById(id);\n\n        setFilmInfo(film);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    searchFilmsById();\n  }, [id, setFilmInfo]);\n\n  if (!filmInfo) {\n    return null;\n  }\n\n  return (\n    <main>\n      <BackLink to={backLinkHref}>\n        <BiLeftArrowCircle size={20} />\n        Go back\n      </BackLink>\n\n      <MoviesInfo filmInfo={filmInfo} state={{ from: location }} />\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledDiv = styled.div`\n  padding: 16px;\n  display: flex;\n  gap: 10px;\n  box-shadow: 0px 4px 10px 4px #9e9e9e;\n`;\n\nexport const BackLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-around;\n  border: 1px solid blue;\n  border-color: #1a7ac8;\n  border-radius: 5px;\n  width: 100px;\n  height: 40px;\n  color: #1a7ac8;\n\n  &:hover {\n    color: #fff;\n    background-color: #058bf8;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  color: #1a7ac8;\n\n  &:hover {\n    color: #fff;\n    background-color: #058bf8;\n  }\n`;\n"],"names":["KEY","BASE_URL","fetchFilmsById","movieId","url","axios","data","sliceFunction","release_date","first_air_date","slice","filmInfo","location","useLocation","poster_path","title","name","original_title","overview","vote_average","genres","style","paddingTop","width","src","alt","Math","ceil","map","genre","join","to","state","from","id","useParams","useState","setFilmInfo","backLinkHref","useEffect","film","console","log","searchFilmsById","size","Suspense","fallback","Loader","StyledDiv","styled","BackLink","Link","StyledLink"],"sourceRoot":""}