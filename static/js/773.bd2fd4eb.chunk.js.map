{"version":3,"file":"static/js/773.bd2fd4eb.chunk.js","mappings":"6LAAO,IAAMA,EAAM,mCAENC,EAAW,8B,gKCCTC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BC,GAA9B,kFACQC,EADR,UACiBH,EAAAA,EADjB,kBACmCE,EADnC,oBACsDH,EAAAA,GADtD,SAKyBK,EAAAA,GAAAA,IAAUD,GALnC,uBAKUE,EALV,EAKUA,KALV,kBAMSA,GANT,kEASA,M,SAT8B,GAAfJ,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,kBC8DTK,EAAgB,SAACC,EAAcC,GACnC,OAAKD,GAAiBC,EAIlBD,EACK,IAAMA,EAAaE,MAAM,EAAG,GAAK,IAGnC,IAAMD,EAAeC,MAAM,EAAG,GAAK,IAPjC,EAQV,EAED,EAzEmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAElBC,GAFwC,EAAZC,MAW1BF,EATFC,aACAE,EAQEH,EARFG,MACAC,EAOEJ,EAPFI,KACAC,EAMEL,EANFK,eACAR,EAKEG,EALFH,aACAC,EAIEE,EAJFF,eACAQ,EAGEN,EAHFM,SACAC,EAEEP,EAFFO,aACAC,EACER,EADFQ,OAGF,OACE,iCACE,iBACEC,MAAO,CACLC,WAAY,GACZC,QAAS,OACTC,IAAK,IAJT,WAOE,gBACEC,MAAM,QACNC,IA1Bc,kCA0BSb,EACvBc,IAAKZ,GAASC,KAEhB,4BACE,0BACGD,GAASC,GAAQC,GAAkB,WACpC,gCAAQT,EAAcC,EAAcC,UAEtC,yCACc,4BAAOkB,KAAKC,KAAoB,GAAfV,GAAjB,WAEd,sCACA,uBAAID,KACJ,oCACA,uBAAIE,EAAOU,KAAI,SAAAC,GAAK,OAAIA,EAAMf,IAAV,IAAgBgB,KAAK,cAI7C,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAOZ,MAAO,CAAEa,MAAO,WAAhC,qBAIF,yBACE,SAAC,KAAD,CAAMD,GAAG,UAAUZ,MAAO,CAAEa,MAAO,WAAnC,+BAQX,ECHD,EArDqB,WAAO,IAAD,IACjBC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAgCE,EAAAA,EAAAA,UAAS,MAAzC,eAAOzB,EAAP,KAAiB0B,EAAjB,KAEMC,EAAY,qBADDC,EAAAA,EAAAA,MACa1B,aAAZ,aAAG,EAAgB2B,YAAnB,QAA2B,UAgB7C,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAEuBvC,EAAegC,GAFtC,OAEUQ,EAFV,OAIIL,EAAYK,GAJhB,gDAMIC,QAAQC,IAAR,MANJ,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACX,EAAIG,IAEH1B,GAKH,6BACE,UAAC,KAAD,CACEqB,GAAIM,EACJlB,MAAO,CACLE,QAAS,cACTwB,WAAY,SACZC,eAAgB,eAChBC,OAAQ,iBACRC,YAAa,UACbC,aAAc,EACd1B,MAAO,IACP2B,OAAQ,GACRlB,MAAO,WAXX,WAcE,SAAC,MAAD,CAAmBmB,KAAM,KAd3B,cAkBA,SAAC,EAAD,CAAYzC,SAAUA,KAEtB,SAAC,EAAA0C,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,SA1BG,IA8BV,C","sources":["MoviesAPI/key-url.js","MoviesAPI/fetchFilmsById.js","components/Movies/MoviesInfo.jsx","Pages/Movies/MoviesDetails.jsx"],"sourcesContent":["export const KEY = '3c2d3d1a4a9318a7ef02a0fdedccb03f';\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n","import axios from 'axios';\nimport { KEY, BASE_URL } from './key-url';\n\nasync function fetchFilmsById(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?api_key=${KEY}`;\n\n  // &page=${page}\n\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport default fetchFilmsById;\n","import { Link } from 'react-router-dom';\n\nconst BASE_IMAGES_URL = 'https://image.tmdb.org/t/p/w400';\n\nconst MoviesInfo = ({ filmInfo, state }) => {\n  const {\n    poster_path,\n    title,\n    name,\n    original_title,\n    release_date,\n    first_air_date,\n    overview,\n    vote_average,\n    genres,\n  } = filmInfo;\n\n  return (\n    <>\n      <div\n        style={{\n          paddingTop: 16,\n          display: 'flex',\n          gap: 10,\n        }}\n      >\n        <img\n          width=\"200px\"\n          src={BASE_IMAGES_URL + poster_path}\n          alt={title || name}\n        />\n        <div>\n          <h2>\n            {title || name || original_title || 'no info'}\n            <span> {sliceFunction(release_date, first_air_date)}</span>\n          </h2>\n          <p>\n            User Score: <span>{Math.ceil(vote_average * 10)}%</span>\n          </p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres.map(genre => genre.name).join(' ')}</p>\n        </div>\n      </div>\n\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to=\"cast\" style={{ color: '#1a7ac8' }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" style={{ color: '#1a7ac8' }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nconst sliceFunction = (release_date, first_air_date) => {\n  if (!release_date && !first_air_date) {\n    return '';\n  }\n\n  if (release_date) {\n    return '(' + release_date.slice(0, 4) + ')';\n  }\n\n  return '(' + first_air_date.slice(0, 4) + ')';\n};\n\nexport default MoviesInfo;\n","import { useState, useEffect, Suspense } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport fetchFilmsById from 'MoviesAPI/fetchFilmsById';\nimport { BiLeftArrowCircle } from 'react-icons/bi';\nimport MoviesInfo from 'components/Movies/MoviesInfo';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [filmInfo, setFilmInfo] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    async function searchFilmsById() {\n      try {\n        const film = await fetchFilmsById(id);\n\n        setFilmInfo(film);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    searchFilmsById();\n  }, [id, setFilmInfo]);\n\n  if (!filmInfo) {\n    return null;\n  }\n\n  return (\n    <main>\n      <Link\n        to={backLinkHref}\n        style={{\n          display: 'inline-flex',\n          alignItems: 'center',\n          justifyContent: 'space-around',\n          border: '1px solid blue',\n          borderColor: '#1a7ac8',\n          borderRadius: 5,\n          width: 100,\n          height: 40,\n          color: '#1a7ac8',\n        }}\n      >\n        <BiLeftArrowCircle size={20} />\n        Go back\n      </Link>\n\n      <MoviesInfo filmInfo={filmInfo} />\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["KEY","BASE_URL","fetchFilmsById","movieId","url","axios","data","sliceFunction","release_date","first_air_date","slice","filmInfo","poster_path","state","title","name","original_title","overview","vote_average","genres","style","paddingTop","display","gap","width","src","alt","Math","ceil","map","genre","join","to","color","id","useParams","useState","setFilmInfo","backLinkHref","useLocation","from","useEffect","film","console","log","searchFilmsById","alignItems","justifyContent","border","borderColor","borderRadius","height","size","Suspense","fallback","Loader"],"sourceRoot":""}