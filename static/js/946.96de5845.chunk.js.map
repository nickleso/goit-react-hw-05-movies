{"version":3,"file":"static/js/946.96de5845.chunk.js","mappings":"6LAAO,IAAMA,EAAM,mCAENC,EAAW,8B,8ICCTC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCC,GAAjC,kFACQC,EADR,UACiBH,EAAAA,EADjB,kBACmCE,EADnC,4BAC8DH,EAAAA,GAD9D,SAGyBK,EAAAA,GAAAA,IAAUD,GAHnC,uBAGUE,EAHV,EAGUA,KAHV,kBAISA,GAJT,kEAOA,M,SAPiC,GAAlBJ,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,SC4Df,EAzDa,WACX,IAAQK,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAE2BV,EAAkBK,GAF7C,OAEUM,EAFV,OAIIF,EAAQE,EAASH,MAJrB,gDAMII,QAAQC,IAAR,MANJ,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACT,EAAII,IAEHD,GAKH,0BACE,eACEO,MAAO,CACLC,QAAS,OACTC,IAAK,EACLC,SAAU,OACVC,UAAW,QALf,SAQGX,EAAKY,OAAS,GACbZ,EAAKa,KAAI,gBAAGhB,EAAH,EAAGA,GAAIiB,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,aAA5B,OACP,gBAEET,MAAO,CACLU,MAAO,KAHX,WAME,gBACEA,MAAM,QACNC,IACEF,EA7CM,kCA8CgBA,EAClB,0DAENG,IAAKJ,GAAQD,GAAiB,aAEhC,wBAAKC,GAAQD,GAAiB,cAdzBjB,EAFA,QAdR,IAoCV,C","sources":["MoviesAPI/key-url.js","MoviesAPI/fetchFilmsCredits.js","Pages/Movies/Cast.jsx"],"sourcesContent":["export const KEY = '3c2d3d1a4a9318a7ef02a0fdedccb03f';\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n","import axios from 'axios';\nimport { KEY, BASE_URL } from './key-url';\n\nasync function fetchFilmsCredits(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`;\n\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport default fetchFilmsCredits;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchFilmsCredits from 'MoviesAPI/fetchFilmsCredits';\n\nconst BASE_IMAGES_URL = 'https://image.tmdb.org/t/p/w400';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    async function searchFilmsById() {\n      try {\n        const filmCast = await fetchFilmsCredits(id);\n\n        setCast(filmCast.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    searchFilmsById();\n  }, [id, setCast]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <div>\n      <ul\n        style={{\n          display: 'flex',\n          gap: 6,\n          flexWrap: 'wrap',\n          listStyle: 'none',\n        }}\n      >\n        {cast.length > 0 &&\n          cast.map(({ id, original_name, name, profile_path }) => (\n            <li\n              key={id}\n              style={{\n                width: 150,\n              }}\n            >\n              <img\n                width=\"150px\"\n                src={\n                  profile_path\n                    ? BASE_IMAGES_URL + profile_path\n                    : 'https://dummyimage.com/200x300/bab8ba/000&text=no+photo'\n                }\n                alt={name || original_name || 'no info'}\n              />\n              <h4>{name || original_name || 'no info'}</h4>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["KEY","BASE_URL","fetchFilmsCredits","movieId","url","axios","data","id","useParams","useState","cast","setCast","useEffect","filmCast","console","log","searchFilmsById","style","display","gap","flexWrap","listStyle","length","map","original_name","name","profile_path","width","src","alt"],"sourceRoot":""}